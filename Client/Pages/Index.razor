@page "/"
@page "/notes"
@inject HttpClient Http
@inject IJSRuntime Js
@using blazing_notes.Shared.Models

<PageTitle>Notes</PageTitle>
<div class="container mb-5">
    <div class="row shadow">
        <h6 class="text-center mt-2"><em class="oi oi-plus text-success"></em> Add Notes</h6>
        <div class="me-2 mb-2">
            <NoteForm Note="@NewNote" OnValidSubmit="@SubmitNewNote" ButtonName="Add New" Rows="3" />
        </div>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert bg-info">
                <p class="fw-bold">@message</p>
            </div>
        }
    </div>
    @if (Notes != null)
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-3 mt-4">
            @foreach (var note in Notes)
            {
                <div class="col">
                    <div class="card shadow border-0">
                        <div class="card-body">
                            <h5 class="card-title text-center">@note.Title</h5>
                            <div class="card-subtitle mt-3">
                                @note.Content!.Truncate(80)
                            </div>
                            @foreach (var tag in note.Tags!)
                            {
                                <small class="m-1 text-primary">@tag.Name</small>
                            }
                        </div>
                        <div class="card-footer text-center">
                            <div class="form-group">
                                <a href="/note/edit/@note.Id" title="View/Edit" class="text-decoration-none btn btn-default border-0">
                                    <em class="oi oi-pencil text-success"></em>
                                </a>
                                <button @onclick="@(() => DeleteNote(note.Id))" title="Delete" class="text-decoration-none btn btn-default border-0">
                                    <em class="oi oi-trash text-danger"></em>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <Loading />
    }
</div>

@code
{
    private Note[]? Notes {get; set;}
    public NoteDto NewNote = new NoteDto();
    private string? message {get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetNotesAsync();
    }

    async Task GetNotesAsync()
    {
        Notes = await Http.GetFromJsonAsync<Note[]>("api/notes/all");
    }

    async Task SubmitNewNote()
    {
        var response = await Http.PostAsJsonAsync("api/notes/new", NewNote);
        if (response.IsSuccessStatusCode)
        {
            NewNote = new NoteDto();
            await OnInitializedAsync();
        }
        else
        {
            message = "Error submitting your Note";
        }
    }

    async Task DeleteNote(int NoteId)
    {
        var note = Notes!.First(n => n.Id == NoteId );
        if (await Js.InvokeAsync<bool>("confirm", $"Are you sure yo want to delete [{note!.Title}] ?"))
        {
            await Http.DeleteAsync($"/api/notes/delete/{NoteId}");
            Console.WriteLine($"Deleted {note.Title}");
            await OnInitializedAsync();
        }
    }
}